/*
 * The MIT License
 *
 * Copyright 2017 user.
 *
 * Данная лицензия разрешает, безвозмездно, лицам, получившим копию данного программного
 * обеспечения и сопутствующей документации (в дальнейшем именуемыми "Программное Обеспечение"), 
 * использовать Программное Обеспечение без ограничений, включая неограниченное право на 
 * использование, копирование, изменение, объединение, публикацию, распространение, сублицензирование 
 * и/или продажу копий Программного Обеспечения, также как и лицам, которым предоставляется 
 * данное Программное Обеспечение, при соблюдении следующих условий:
 *
 * Вышеупомянутый копирайт и данные условия должны быть включены во все копии 
 * или значимые части данного Программного Обеспечения.
 *
 * ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ ЛЮБОГО ВИДА ГАРАНТИЙ, 
 * ЯВНО ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ГАРАНТИЯМИ ТОВАРНОЙ ПРИГОДНОСТИ, 
 * СООТВЕТСТВИЯ ПО ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И НЕНАРУШЕНИЯ ПРАВ. НИ В КАКОМ СЛУЧАЕ АВТОРЫ 
 * ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО ИСКАМ О ВОЗМЕЩЕНИИ УЩЕРБА, УБЫТКОВ 
 * ИЛИ ДРУГИХ ТРЕБОВАНИЙ ПО ДЕЙСТВУЮЩИМ КОНТРАКТАМ, ДЕЛИКТАМ ИЛИ ИНОМУ, ВОЗНИКШИМ ИЗ, ИМЕЮЩИМ 
 * ПРИЧИНОЙ ИЛИ СВЯЗАННЫМ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ ИЛИ ИСПОЛЬЗОВАНИЕМ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ 
 * ИЛИ ИНЫМИ ДЕЙСТВИЯМИ С ПРОГРАММНЫМ ОБЕСПЕЧЕНИЕМ.
 */
package xyz.cofe.demo.oracledbchnotif;

import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.SwingUtilities;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.dcn.DatabaseChangeRegistration;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import oracle.jdbc.OracleStatement;

/**
 *
 * @author user
 */
public class StatementExecPanel extends javax.swing.JPanel {

    /**
     * Creates new form StatementExecPanel
     */
    public StatementExecPanel() {
        initComponents();
        execQueryButton.addActionListener((e) -> {execute();});
    }
    
    private OracleConnection oracleConnection;
    public OracleConnection getOracleConnection() { return oracleConnection; }
    public void setOracleConnection(OracleConnection oracleConnection) { this.oracleConnection = oracleConnection; }
    
    private DatabaseChangeRegistration dbChangeReg;
    public DatabaseChangeRegistration getDbChangeReg() { return dbChangeReg; }
    public void setDbChangeReg(DatabaseChangeRegistration dbChangeReg) { this.dbChangeReg = dbChangeReg; }
    
    private void status(String message){
        if( message==null )return;
        Runnable run = ()->{
            queryStatusLabel.setText(message);
        };
        if( SwingUtilities.isEventDispatchThread() ){
            run.run();
        }else{
            SwingUtilities.invokeLater(run);
        }
    }
    
    private void execute(){
        try {
            OracleConnection oraConn = oracleConnection;
            if( oraConn==null ){
                status("connection not set");
                return;
            }
            
            DatabaseChangeRegistration dbChReg = getDbChangeReg();
            if( dbChReg==null ){
                status("DatabaseChangeRegistration not set");
                return;
            }
            
            String queryText = queryTextArea.getText();
            
            Statement stmnt = oraConn.createStatement();
            if( stmnt instanceof OracleStatement ){
                ((OracleStatement)stmnt).setDatabaseChangeRegistration(dbChReg);                
            }else{
                Logger.getLogger(StatementExecPanel.class.getName()).info("can't set db change registration");
            }
            
            ResultSet rs = stmnt.executeQuery(queryText);
            int rowCnt = 0;
            while(rs.next()){
                rowCnt++;
            }
            
            rs.close();
            stmnt.close();
            
            status("query executed with return "+rowCnt+" rows");
        } catch (SQLException ex) {
            Logger.getLogger(StatementExecPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        queryTextArea = new javax.swing.JTextArea();
        queryStatusLabel = new javax.swing.JLabel();
        execQueryButton = new javax.swing.JButton();

        queryTextArea.setColumns(20);
        queryTextArea.setRows(5);
        jScrollPane1.setViewportView(queryTextArea);

        queryStatusLabel.setText("query status");

        execQueryButton.setText("execute query");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(queryStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(execQueryButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(queryStatusLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(execQueryButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton execQueryButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel queryStatusLabel;
    private javax.swing.JTextArea queryTextArea;
    // End of variables declaration//GEN-END:variables
}
